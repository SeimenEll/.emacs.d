#+STARTUP: indent
* Init Files

#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/.emacs-custom.el")
   (load custom-file)
(setq user-emacs-directory "~/.emacs.d/")
(setq default-directory "~/")
(add-to-list 'load-path "~/.emacs.d/lisp/")
(setq backup-directory-alist `(("." . "~/.backup_emacs")))
#+END_SRC

* Clean Frame

#+BEGIN_SRC emacs-lisp
(tool-bar-mode 0)
(menu-bar-mode 0)
(toggle-scroll-bar -1) 
(defun my/disable-scroll-bars (frame)
  (modify-frame-parameters frame
                           '((vertical-scroll-bars . nil)
                             (horizontal-scroll-bars . nil))))
(add-hook 'after-make-frame-functions 'my/disable-scroll-bars)
#+END_SRC

* Unsorted

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)

(setq column-number-mode t)
(setq tab-width 4)

(global-auto-revert-mode t)
#+END_SRC

* Solarized Theme

#+BEGIN_SRC emacs-lisp
(use-package solarized-theme
   :ensure t
   :config 
   (setq solarized-use-variable-pitch nil)
   (setq solarized-height-plus-1 1.0)
   (setq solarized-height-plus-2 1.0)
   (setq solarized-height-plus-3 1.0)
   (setq solarized-height-plus-4 1.0)
   (setq solarized-high-contrast-mode-line t)
   (load-theme 'solarized-dark t))
#+END_SRC

* Whitespace mode

#+BEGIN_SRC emacs-lisp
(use-package whitespace
   :ensure t
   :config
   (setq whitespace-style '(face lines-tail))
   :hook (prog-mode-hook whitespace-mode))
#+END_SRC

* Navigation

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-o") 'other-window)
(global-set-key (kbd "M-O") 'other-frame)
(setq next-screen-context-lines 15)
(show-paren-mode 1)
(global-set-key (kbd "M-SPC") 'cycle-spacing)
#+END_SRC

* Org mode

** General

#+BEGIN_SRC emacs-lisp
(require 'org)
(define-key global-map "\C-ca" 'org-agenda)
;;(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\)$" . org-mode))
;; KEYWORDS für TODO
(setq org-todo-keywords
      '((sequence "TODO(t)" "|" "DONE(d)" "CANCELED(c)")))
;; TAGS für TODO
(setq org-tag-alist
      '(("@work" . ?w) ("@home" . ?h) ("laptop" . ?l)))

(setq org-capture-templates
      '(("p" ; hotkey
	 "Private task." ; name
	 entry (file+headline "~/Dropbox/Dokumente/PersonalTasks.org" "Unsortiert.")
	 "* TODO %?\n %i")))

(setq org-log-done 'time)

(define-key global-map "\C-cl" 'org-store-link)

(setq org-image-actual-width (/ (display-pixel-width) 3))
#+END_SRC

** Code Highlight

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t
    org-src-tab-acts-natively t
    org-confirm-babel-evaluate nil
    org-edit-src-content-indentation 0)
#+END_SRC

** Agenda

Oeffnet die Agenda im selben Fenster und zerstört nicht das momentane Window-Setup
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-window-setup 'current-window)
#+END_SRC

** Org-bullet

Org-bullet is pretty laggy.
#+BEGIN_SRC emacs-lisp
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)

;;(setq org-ellipsis "⤵")
(setq org-src-tab-acts-natively t)
(setq org-src-window-setup 'current-window)

(define-key global-map "\C-cc" 'org-capture)
(setq org-export-coding-system 'utf-8)

;;(require 'org-bullets)
;;(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC

** Summary TODO

#+BEGIN_SRC emacs-lisp
(defun org-summary-todo (n-done n-not-done)
  "Switch entry to DONE when all subentries are done, to TODO otherwise."
  (let (org-log-done org-log-states)   ; turn off logging
    (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

(add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
#+END_SRC

** Export

#+BEGIN_SRC emacs-lisp
(eval-after-load "org"
  '(require 'ox-md nil t))
#+END_SRC

** Org Babel

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
'org-babel-load-languages
'((dot . t)))
#+END_SRC

** Twiki

#+BEGIN_SRC emacs-lisp
;;(require 'ox-tiddly) ;; error: Unknown keyword: :export-block
;;(require 'ox-twiki)
#+END_SRC

* Helm

#
+BEGIN_SRC emacs-lisp
(require 'helm-config)
(global-set-key (kbd "M-x") 'helm-M-x)
#
+END_SRC

* Ido

#+BEGIN_SRC emacs-lisp
(use-package ido
   :ensure t
   :config 
   (setq ido-enable-flex-matching t
         ido-everywhere t
         ido-create-new-buffer 'always
         ido-vertical-define-keys 'C-n-and-C-p-only
         ido-use-filename-at-point (quote guess))
   (setq ido-file-extensions-order
         (quote (".vhd" ".org" ".txt" ".emacs" ".xml" ".el" ".ini" ".cfg" ".cnf")))
   (ido-mode 1))
#+END_SRC

* Exex Path for Work-PC

#
+BEGIN_SRC emacs-lisp
(if (file-directory-p "C:/cygwin64/bin")
    (add-to-list 'exec-path "C:/cygwin64/bin"))
#
+END_SRC

** Flyspell

#
+BEGIN_SRC emacs-lisp
(add-to-list 'exec-path "E:/Programme/Aspell/bin/")
(setq ispell-program-name "aspell")
(require 'ispell)
#
+END_SRC

** Langtool

#
+BEGIN_SRC emacs-lisp
(require 'langtool)
(setq langtool-language-tool-jar "E:/Programme/LanguageTool-3.8/languagetool-commandline.jar")
#
+END_SRC

* Buffer Move

#+BEGIN_SRC emacs-lisp
(use-package buffer-move
  :ensure t
  :bind (("C-c <up>" . buf-move-up)
         ("C-c <down>" . buf-move-down)
         ("C-c <left>" . buf-move-left)
         ("C-c <right>" . buf-move-right)))
#+END_SRC

* MAGIT

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :bind ("C-x g" . magit-status))  
#+END_SRC

* Custom Functions

** Good Morning Simon

#+BEGIN_SRC emacs-lisp
(defun good-morning-simon ()
"Start all interesting Buffer for workflow."
(interactive)
(toggle-frame-fullscreen)
(split-window-right 58)
;;(tomatinho)
;;(split-window-below 50)
(find-file "C:/Users/sliebelt/Dropbox/Dokumente/Habits.org")
(split-window-below 30)
(find-file "E:/Dokumente/Stundenzettel.org")
(make-frame))
#+END_SRC


** Whack Whitespace

#+BEGIN_SRC emacs-lisp
    (defun whack-whitespace (arg)
      "Delete all white space from point to the next word.  With prefix ARG
    delete across newlines as well.  The only danger in this is that you
    don't have to actually be at the end of a word to make it work.  It
    skips over to the next whitespace and then whacks it all to the next
    word."
      (interactive "P")
      (let ((regexp (if arg "[ \t\n]+" "[ \t]+")))
        (re-search-forward regexp nil t)
        (replace-match "" nil nil)))

#+END_SRC

* Time

#+BEGIN_SRC emacs-lisp
(display-time)
#+END_SRC

* Google

#+BEGIN_SRC emacs-lisp
(use-package google-this
  :ensure t
  :config (google-this-mode 1))  
#+END_SRC

* RFC View

#
+BEGIN_SRC emacs-lisp
(require 'irfc)
(setq irfc-directory "E:/Dokumente/Richtlinien/RFC/")
(setq irfc-assoc-mode t)
(setq auto-mode-alist
       (cons '("/rfc[0-9]+\\.txt\\(\\.gz\\)?\\'" . irfc-mode)
          auto-mode-alist))
#
+END_SRC

* Clang Format

#
+BEGIN_SRC emacs-lisp

(require 'clang-format)
(global-set-key (kbd "C-c i") 'clang-format-region)
(global-set-key (kbd "C-c u") 'clang-format-buffer)

(setq clang-format-style-option "Google")

#
+END_SRC

* Tiny Expand

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-;") #'tiny-expand)
#+END_SRC

* Same Frame Speedbar

#
+BEGIN_SRC emacs-lisp
 (require 'sr-speedbar)
 (global-set-key (kbd "s-s") 'sr-speedbar-toggle)
#
+END_SRC

* Dired

** General

#+BEGIN_SRC emacs-lisp
(add-hook 'dired-mode-hook 'auto-revert-mode)
#+END_SRC

** Icon

#+BEGIN_SRC emacs-lisp
(add-hook 'dired-mode-hook 'dired-icon-mode)
#+END_SRC
** Launch

#
+BEGIN_SRC emacs-lisp
(require 'dired-launch)
(dired-launch-enable)
#
+END_SRC

** Detail

#+BEGIN_SRC emacs-lisp
(setq-default dired-details-hidden-string "--- ")
#+END_SRC

** Subtree

#
+BEGIN_SRC emacs-lisp
(use-package dired-subtree
  :ensure t
  :config
  (bind-keys :map dired-mode-map
             ("i" . dired-subtree-insert)
             (";" . dired-subtree-remove)))
#
+END_SRC

* Imenue

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-.") 'imenu-anywhere)
#+END_SRC

* Flycheck

#
+BEGIN_SRC emacs-lisp
;;(require 'flycheck)
;;(global-flycheck-mode)
#
+END_SRC

* Multiple Cursor

#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :ensure t
  :bind (("C-S-c C-S-c" . mc/edit-lines)
         ("C->" . mc/mark-next-like-this)
         ("C-<" . mc/mark-previous-like-this)
         ("C-c C-<" . mc/mark-all-like-this)))
#+END_SRC

* Ivy

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :ensure swiper
  :ensure counsel
  :config 
  (setq ivy-use-virtual-buffers t
        enable-recursive-minibuffers t)
  :bind (("\C-s" . swiper)
         ("C-c C-r" . ivy-resume)
         ("<f6>" . ivy-resume)
         ("M-x" . counsel-M-x)
         ("C-x C-f" . counsel-find-file)
         ("<f1> f" . counsel-describe-function)
         ("<f1> v" . counsel-describe-variable)
         ("<f1> l" . counsel-find-library)
         ("<f2> i" . counsel-info-lookup-symbol)
         ("<f2> u" . counsel-unicode-char)
         ("C-x l" . counsel-locate)
         ("C-S-o" . counsel-rhythmbox)
         ("C-r" . counsel-minibuffer-history)))
#+END_SRC

* C Mode Functions
#+BEGIN_SRC emacs-lisp
(defun my-prettify-c-block-comment (orig-fun &rest args)
  (let* ((first-comment-line (looking-back "/\\*\\s-*.*"))
         (star-col-num (when first-comment-line
                         (save-excursion
                           (re-search-backward "/\\*")
                           (1+ (current-column))))))
    (apply orig-fun args)
    (when first-comment-line
      (save-excursion
        (newline)
        (dotimes (cnt star-col-num)
          (insert " "))
        (move-to-column star-col-num)
        (insert "*/"))
      (move-to-column star-col-num) ; comment this line if using bsd style
      (insert "*") ; comment this line if using bsd style
     ))
  ;; Ensure one space between the asterisk and the comment
  (when (not (looking-back " "))
    (insert " ")))
(advice-add 'c-indent-new-comment-line :around #'my-prettify-c-block-comment)
;; (advice-remove 'c-indent-new-comment-line #'my-prettify-c-block-comment)
#+END_SRC

* Astyle

#+BEGIN_SRC emacs-lisp
(defun astyle-this-buffer (pmin pmax)
  (interactive "r")
  (shell-command-on-region pmin pmax
                           "E:/Programme/AStyle/bin/AStyle.exe --options=E:/Dokumente/Richtlinien/CodingStyle/astylerc" ;; add options here...
                           (current-buffer) t 
                           (get-buffer-create "*Astyle Errors*") t))
#+END_SRC


